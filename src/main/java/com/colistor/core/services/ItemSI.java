/*Colistor, collections and lists organizer
*Copyright (C) 2016  Colistor (Joel Favre)
*
*This program is free software: you can redistribute it and/or modify
*it under the terms of the GNU Affero General Public License as published
*by the Free Software Foundation, either version 3 of the License, or
*(at your option) any later version.
*
*This program is distributed in the hope that it will be useful,
*but WITHOUT ANY WARRANTY; without even the implied warranty of
*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*GNU Affero General Public License for more details.
*
*You should have received a copy of the GNU Affero General Public License
*along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package com.colistor.core.services;

import com.colistor.core.persistence.model.Filter;
import com.colistor.core.persistence.model.Item;
import com.colistor.core.services.exception.ServiceException;

import java.util.List;

/**
 * Management of items, creating, modifying, deleting, retrieving.
 *
 * @see com.colistor.core.persistence.model.Item Concerning Item
 */
public interface ItemSI {

    /**
     * Create a new Item. It will not be added to a list.
     *
     * @param userCode The code of the user that will own the new Item
     * @param item     The values of the new Item. The id and the code are note needed (generated by the dao)
     * @return The new Item with the id and the code
     * @throws ServiceException It will be thrown if the parameters are not correct or if something else happens
     * @see com.colistor.core.persistence.model.User
     */
    Item create(String userCode, Item item) throws ServiceException;

    /**
     * Modify an Item.
     *
     * @param userCode  The code of the user that wants to modify the Item to verify the rights.
     * @param itemCode  The code the item to modify.
     * @param newValues The new values of the Item, including the values that have not been modified. The id and the code are not needed.
     * @return The modified Item with the id and the code.
     * @throws ServiceException It will be thrown if the parameters are not correct or if something else happens
     * @see com.colistor.core.persistence.model.User
     */
    Item modify(String userCode, String itemCode, Item newValues) throws ServiceException;

    /**
     * Delete an Item.<strong>Delete even if it is still referenced by a list</strong> Therefore, it will also remove all the references made by the lists.
     *
     * @see com.colistor.core.persistence.model.User
     *
     * @param userCode The code of the user, to make sure that the user has the rights to delete
     * @param itemCode The code of the item to delete
     * @throws ServiceException It will be thrown if the parameters are not correct or if something else happens
     */
    void delete(String userCode, String itemCode) throws ServiceException;

    /**
     * Retrieves items.
     *
     * @param userCode The user code to select only the items that the user can see (including shared)
     * @param filter   A filter to apply to the selection.
     * @return A list of items corresponding to the criteria.
     * @throws ServiceException
     */
    List<Item> find(String userCode, Filter filter) throws ServiceException;

}
